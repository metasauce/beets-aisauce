name: Auto Release

on:
    push:
        branches: [main]

jobs:
    check-version-and-release:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetch full history to compare versions

            - name: Set up Python 3.12
              uses: actions/setup-python@v5
              with:
                  python-version: 3.12
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip build twine toml

            - name: Get current version from pyproject.toml
              id: current_version
              run: |
                  CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
                  echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                  echo "Current version: $CURRENT_VERSION"

            - name: Get previous version (from Git tags)
              id: previous_version
              run: |
                  LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                  if [ -n "$LAST_TAG" ]; then
                    PREV_VERSION=$(echo "$LAST_TAG" | sed 's/^v//')
                    echo "previous_version=$PREV_VERSION" >> $GITHUB_OUTPUT
                    echo "Previous version: $PREV_VERSION"
                  else
                    echo "previous_version=" >> $GITHUB_OUTPUT
                    echo "No previous version found"
                  fi

            - name: Check version change
              id: version_changed
              run: |
                  if [ "${{ steps.current_version.outputs.version }}" != "${{ steps.previous_version.outputs.previous_version }}" ]; then
                    echo "changed=true" >> $GITHUB_OUTPUT
                    echo "Version changed → Release triggered"
                  else
                    echo "changed=false" >> $GITHUB_OUTPUT
                    echo "Version unchanged → Skipping release"
                  fi

            - name: Build package
              if: steps.version_changed.outputs.changed == 'true'
              run: |
                  python -m build

            - name: Publish to PyPI
              if: steps.version_changed.outputs.changed == 'true'
              uses: pypa/gh-action-pypi-publish@release/v1

            - name: Create Git tag
              if: steps.version_changed.outputs.changed == 'true'
              run: |
                  TAG_NAME="v${{ steps.current_version.outputs.version }}"
                  git tag "$TAG_NAME"
                  git push origin "$TAG_NAME"

            - name: Print result
              run: |
                  if [ "${{ steps.version_changed.outputs.changed }}" = "true" ]; then
                    echo "✅ Released v${{ steps.current_version.outputs.version }} to PyPI and GitHub"
                  else
                    echo "ℹ️ No version change detected"
                  fi
